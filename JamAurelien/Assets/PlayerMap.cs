//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMap"",
    ""maps"": [
        {
            ""name"": ""PLAYER"",
            ""id"": ""df8369b1-aa37-405c-b0e8-4c5f26ca5b75"",
            ""actions"": [
                {
                    ""name"": ""MOVEH"",
                    ""type"": ""Button"",
                    ""id"": ""fff686c7-1e3c-49fe-86c0-6468075874ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JUMP"",
                    ""type"": ""Button"",
                    ""id"": ""af8c273d-95cd-4437-b5fd-6f799aac9adf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""e47c5594-c37e-4ed1-a75e-3f62308bd25d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7250b496-01a5-4314-9950-a906019e23f3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5a02baaf-5a69-40cb-9206-b4efba8584fb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""QD"",
                    ""id"": ""63810a6c-d75c-4d94-8c2d-ca4fe0ed1019"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""67f2ad3a-d122-445d-b1db-78aeb7960edc"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5e2aa469-335f-43f5-ae25-3244d7584881"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GAMEPAD"",
                    ""id"": ""6d63f7ea-826e-4353-8651-382c1da827fe"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dae5a824-6d33-4871-b27b-e392a2077560"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""84011e27-fd4a-4726-88bc-20debce7e015"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c5e80dca-7849-4a8e-a0fc-409e1f9c29f9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87913925-e40d-4b28-9725-2613e3f82767"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PLAYER
        m_PLAYER = asset.FindActionMap("PLAYER", throwIfNotFound: true);
        m_PLAYER_MOVEH = m_PLAYER.FindAction("MOVEH", throwIfNotFound: true);
        m_PLAYER_JUMP = m_PLAYER.FindAction("JUMP", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PLAYER
    private readonly InputActionMap m_PLAYER;
    private List<IPLAYERActions> m_PLAYERActionsCallbackInterfaces = new List<IPLAYERActions>();
    private readonly InputAction m_PLAYER_MOVEH;
    private readonly InputAction m_PLAYER_JUMP;
    public struct PLAYERActions
    {
        private @PlayerMap m_Wrapper;
        public PLAYERActions(@PlayerMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MOVEH => m_Wrapper.m_PLAYER_MOVEH;
        public InputAction @JUMP => m_Wrapper.m_PLAYER_JUMP;
        public InputActionMap Get() { return m_Wrapper.m_PLAYER; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PLAYERActions set) { return set.Get(); }
        public void AddCallbacks(IPLAYERActions instance)
        {
            if (instance == null || m_Wrapper.m_PLAYERActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PLAYERActionsCallbackInterfaces.Add(instance);
            @MOVEH.started += instance.OnMOVEH;
            @MOVEH.performed += instance.OnMOVEH;
            @MOVEH.canceled += instance.OnMOVEH;
            @JUMP.started += instance.OnJUMP;
            @JUMP.performed += instance.OnJUMP;
            @JUMP.canceled += instance.OnJUMP;
        }

        private void UnregisterCallbacks(IPLAYERActions instance)
        {
            @MOVEH.started -= instance.OnMOVEH;
            @MOVEH.performed -= instance.OnMOVEH;
            @MOVEH.canceled -= instance.OnMOVEH;
            @JUMP.started -= instance.OnJUMP;
            @JUMP.performed -= instance.OnJUMP;
            @JUMP.canceled -= instance.OnJUMP;
        }

        public void RemoveCallbacks(IPLAYERActions instance)
        {
            if (m_Wrapper.m_PLAYERActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPLAYERActions instance)
        {
            foreach (var item in m_Wrapper.m_PLAYERActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PLAYERActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PLAYERActions @PLAYER => new PLAYERActions(this);
    public interface IPLAYERActions
    {
        void OnMOVEH(InputAction.CallbackContext context);
        void OnJUMP(InputAction.CallbackContext context);
    }
}
